version: "3"

services:
  app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    working_dir: "/home/node/app"
    volumes:
      - ./frontend:/home/node/app
      - /home/node/app/node_modules
    networks:
      - dokploy-network
    command: sh -c "yarn build && yarn start"
    restart: always
    env_file:
      - ".env"
    ports:
      - "4173:4173"

  bot:
    build:
      context: ./backend
      dockerfile: ./bot.Dockerfile
    volumes:
      - ./backend/src:/src/
    networks:
      - dokploy-network
    restart: always
    env_file:
      - ".env"
    command: ["/venv/bin/python", "-m", "app.tgbot.bot"]

  pg_database:
    image: postgres:13-alpine
    networks:
      - dokploy-network
    ports:
      - "5452:5432"
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: "postgres -c max_connections=150 -c shared_buffers=512MB -c effective_cache_size=1536MB -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200 -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2 -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
    env_file:
      - '.env'
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  webhook:
    build:
      context: ./backend
      dockerfile: ./web.Dockerfile
    volumes:
      - ./backend/src:/src
    networks:
      - dokploy-network
    ports:
      - "3779:8000"
    restart: always
    env_file:
      - ".env"
    command: ["/venv/bin/uvicorn", "app.webhook.app:app", "--host", "0.0.0.0", "--port", "8000"]

  redis_cache:
    image: redis:6.2-alpine
    restart: always
    networks:
      - dokploy-network
    command: redis-server --port $REDIS_PORT --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    env_file:
      - ".env"
    volumes:
      - cache:/data

volumes:
  pgdata: { }
  cache: { }

networks:
  dokploy-network:
    external: true
